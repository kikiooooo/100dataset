{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOlHVLRFuhhIijL8s/7DJJ4",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/kikiooooo/100dataset/blob/main/BITCOIN_LSTMipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 27,
      "metadata": {
        "id": "b6ji5EcOz-Ep"
      },
      "outputs": [],
      "source": [
        "import yfinance as yf\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "import tensorflow as tf\n",
        "from tensorflow import keras\n",
        "from tensorflow.keras import layers\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense, LSTM\n",
        "from tensorflow.keras.optimizers import SGD\n",
        "\n",
        "from itertools import cycle\n",
        "import plotly.graph_objects as go\n",
        "import plotly.express as px\n",
        "from plotly.subplots import make_subplots\n",
        "import io\n",
        "from google.colab import files\n",
        "import statsmodels.tools.eval_measures"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_excel('/content/Bitcoin_comparison.xls', index_col = 0)"
      ],
      "metadata": {
        "id": "92q3nCyD0EwZ"
      },
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 235
        },
        "id": "W6pvSg4G0OXS",
        "outputId": "2d8ceb93-b350-4a90-faee-3b839164fb00"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                BTC-USD       DX=F    ES=F     ETH-USD         GC=F     YM=F  \\\n",
              "Date                                                                           \n",
              "2017-11-09  7143.580078  94.351997  2584.0  320.884003  1285.599976  23416.0   \n",
              "2017-11-10  6618.140137  94.278000  2579.5  299.252991  1272.400024  23382.0   \n",
              "2017-11-13  6559.490234  94.388000  2582.0  316.716003  1277.300049  23406.0   \n",
              "2017-11-14  6635.750000  93.723000  2578.0  337.631012  1281.500000  23375.0   \n",
              "2017-11-15  7315.540039  93.725998  2565.0  333.356995  1276.500000  23262.0   \n",
              "\n",
              "                    ^DJI        ^GSPC  \n",
              "Date                                   \n",
              "2017-11-09  23461.939453  2584.620117  \n",
              "2017-11-10  23422.210938  2582.300049  \n",
              "2017-11-13  23439.699219  2584.840088  \n",
              "2017-11-14  23409.470703  2578.870117  \n",
              "2017-11-15  23271.279297  2564.620117  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0f7b73fb-0c29-4253-8907-bb0a63c9e4df\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>BTC-USD</th>\n",
              "      <th>DX=F</th>\n",
              "      <th>ES=F</th>\n",
              "      <th>ETH-USD</th>\n",
              "      <th>GC=F</th>\n",
              "      <th>YM=F</th>\n",
              "      <th>^DJI</th>\n",
              "      <th>^GSPC</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2017-11-09</th>\n",
              "      <td>7143.580078</td>\n",
              "      <td>94.351997</td>\n",
              "      <td>2584.0</td>\n",
              "      <td>320.884003</td>\n",
              "      <td>1285.599976</td>\n",
              "      <td>23416.0</td>\n",
              "      <td>23461.939453</td>\n",
              "      <td>2584.620117</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2017-11-10</th>\n",
              "      <td>6618.140137</td>\n",
              "      <td>94.278000</td>\n",
              "      <td>2579.5</td>\n",
              "      <td>299.252991</td>\n",
              "      <td>1272.400024</td>\n",
              "      <td>23382.0</td>\n",
              "      <td>23422.210938</td>\n",
              "      <td>2582.300049</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2017-11-13</th>\n",
              "      <td>6559.490234</td>\n",
              "      <td>94.388000</td>\n",
              "      <td>2582.0</td>\n",
              "      <td>316.716003</td>\n",
              "      <td>1277.300049</td>\n",
              "      <td>23406.0</td>\n",
              "      <td>23439.699219</td>\n",
              "      <td>2584.840088</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2017-11-14</th>\n",
              "      <td>6635.750000</td>\n",
              "      <td>93.723000</td>\n",
              "      <td>2578.0</td>\n",
              "      <td>337.631012</td>\n",
              "      <td>1281.500000</td>\n",
              "      <td>23375.0</td>\n",
              "      <td>23409.470703</td>\n",
              "      <td>2578.870117</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2017-11-15</th>\n",
              "      <td>7315.540039</td>\n",
              "      <td>93.725998</td>\n",
              "      <td>2565.0</td>\n",
              "      <td>333.356995</td>\n",
              "      <td>1276.500000</td>\n",
              "      <td>23262.0</td>\n",
              "      <td>23271.279297</td>\n",
              "      <td>2564.620117</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0f7b73fb-0c29-4253-8907-bb0a63c9e4df')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0f7b73fb-0c29-4253-8907-bb0a63c9e4df button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0f7b73fb-0c29-4253-8907-bb0a63c9e4df');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-874f6ba0-bde0-409c-988f-75ee53d44322\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-874f6ba0-bde0-409c-988f-75ee53d44322')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-874f6ba0-bde0-409c-988f-75ee53d44322 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def Log_Diff(x):\n",
        "  x = np.log(x/ x.shift(1))\n",
        "  x = x.dropna()\n",
        "  return x\n",
        "\n",
        "df = Log_Diff(df)"
      ],
      "metadata": {
        "id": "iT4qtd0YPJCS"
      },
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 235
        },
        "id": "2l6Rhjj_PZIh",
        "outputId": "f47e64d5-1fe1-4489-c9a7-bdc501ede914"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             BTC-USD      DX=F      ES=F   ETH-USD      GC=F      YM=F  \\\n",
              "Date                                                                     \n",
              "2017-11-10 -0.076400 -0.000785 -0.001743 -0.069790 -0.010321 -0.001453   \n",
              "2017-11-13 -0.008901  0.001166  0.000969  0.056716  0.003844  0.001026   \n",
              "2017-11-14  0.011559 -0.007070 -0.001550  0.063948  0.003283 -0.001325   \n",
              "2017-11-15  0.097529  0.000032 -0.005055 -0.012740 -0.003909 -0.004846   \n",
              "2017-11-16  0.073272  0.001365  0.007767 -0.007325  0.000705  0.006940   \n",
              "\n",
              "                ^DJI     ^GSPC  \n",
              "Date                            \n",
              "2017-11-10 -0.001695 -0.000898  \n",
              "2017-11-13  0.000746  0.000983  \n",
              "2017-11-14 -0.001290 -0.002312  \n",
              "2017-11-15 -0.005921 -0.005541  \n",
              "2017-11-16  0.008007  0.008163  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a011af93-692c-4885-abb9-5ac046116a4c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>BTC-USD</th>\n",
              "      <th>DX=F</th>\n",
              "      <th>ES=F</th>\n",
              "      <th>ETH-USD</th>\n",
              "      <th>GC=F</th>\n",
              "      <th>YM=F</th>\n",
              "      <th>^DJI</th>\n",
              "      <th>^GSPC</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2017-11-10</th>\n",
              "      <td>-0.076400</td>\n",
              "      <td>-0.000785</td>\n",
              "      <td>-0.001743</td>\n",
              "      <td>-0.069790</td>\n",
              "      <td>-0.010321</td>\n",
              "      <td>-0.001453</td>\n",
              "      <td>-0.001695</td>\n",
              "      <td>-0.000898</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2017-11-13</th>\n",
              "      <td>-0.008901</td>\n",
              "      <td>0.001166</td>\n",
              "      <td>0.000969</td>\n",
              "      <td>0.056716</td>\n",
              "      <td>0.003844</td>\n",
              "      <td>0.001026</td>\n",
              "      <td>0.000746</td>\n",
              "      <td>0.000983</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2017-11-14</th>\n",
              "      <td>0.011559</td>\n",
              "      <td>-0.007070</td>\n",
              "      <td>-0.001550</td>\n",
              "      <td>0.063948</td>\n",
              "      <td>0.003283</td>\n",
              "      <td>-0.001325</td>\n",
              "      <td>-0.001290</td>\n",
              "      <td>-0.002312</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2017-11-15</th>\n",
              "      <td>0.097529</td>\n",
              "      <td>0.000032</td>\n",
              "      <td>-0.005055</td>\n",
              "      <td>-0.012740</td>\n",
              "      <td>-0.003909</td>\n",
              "      <td>-0.004846</td>\n",
              "      <td>-0.005921</td>\n",
              "      <td>-0.005541</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2017-11-16</th>\n",
              "      <td>0.073272</td>\n",
              "      <td>0.001365</td>\n",
              "      <td>0.007767</td>\n",
              "      <td>-0.007325</td>\n",
              "      <td>0.000705</td>\n",
              "      <td>0.006940</td>\n",
              "      <td>0.008007</td>\n",
              "      <td>0.008163</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a011af93-692c-4885-abb9-5ac046116a4c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a011af93-692c-4885-abb9-5ac046116a4c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a011af93-692c-4885-abb9-5ac046116a4c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-2fcf89df-03ea-48af-8025-ac49a0c124da\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2fcf89df-03ea-48af-8025-ac49a0c124da')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-2fcf89df-03ea-48af-8025-ac49a0c124da button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "test_data = df.tail(301)\n",
        "test_data = pd.DataFrame(test_data)\n",
        "test_data.shape\n",
        "test_data = test_data.drop(['DX=F','GC=F'], axis = 1)\n",
        "test_data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 450
        },
        "id": "KAm2oF2qzzVX",
        "outputId": "cb4f0e41-7a69-4bca-f15b-9f94254761a6"
      },
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             BTC-USD      ES=F   ETH-USD      YM=F      ^DJI     ^GSPC\n",
              "Date                                                                  \n",
              "2022-08-26 -0.064086 -0.034263 -0.117902 -0.030825 -0.030757 -0.034269\n",
              "2022-08-29  0.001873 -0.006983  0.029572 -0.005844 -0.005729 -0.006689\n",
              "2022-08-30 -0.025001 -0.010912 -0.018980 -0.009397 -0.009645 -0.011089\n",
              "2022-08-31  0.012697 -0.007805  0.019397 -0.007677 -0.008861 -0.007848\n",
              "2022-09-01  0.003852  0.003091  0.020697  0.004146  0.004622  0.002992\n",
              "...              ...       ...       ...       ...       ...       ...\n",
              "2023-10-31  0.004783  0.006311  0.003513  0.003568  0.003756  0.006454\n",
              "2023-11-01  0.021953  0.010333  0.016722  0.006498  0.006685  0.010451\n",
              "2023-11-02 -0.014182  0.018565 -0.025480  0.016740  0.016823  0.018683\n",
              "2023-11-03 -0.005911  0.009240  0.017711  0.006554  0.006546  0.009350\n",
              "2023-11-06  0.008744  0.001884  0.035926  0.000791  0.001014  0.001751\n",
              "\n",
              "[301 rows x 6 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1f6daeb5-68dc-4acc-93b6-b012cfeca1e9\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>BTC-USD</th>\n",
              "      <th>ES=F</th>\n",
              "      <th>ETH-USD</th>\n",
              "      <th>YM=F</th>\n",
              "      <th>^DJI</th>\n",
              "      <th>^GSPC</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2022-08-26</th>\n",
              "      <td>-0.064086</td>\n",
              "      <td>-0.034263</td>\n",
              "      <td>-0.117902</td>\n",
              "      <td>-0.030825</td>\n",
              "      <td>-0.030757</td>\n",
              "      <td>-0.034269</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-08-29</th>\n",
              "      <td>0.001873</td>\n",
              "      <td>-0.006983</td>\n",
              "      <td>0.029572</td>\n",
              "      <td>-0.005844</td>\n",
              "      <td>-0.005729</td>\n",
              "      <td>-0.006689</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-08-30</th>\n",
              "      <td>-0.025001</td>\n",
              "      <td>-0.010912</td>\n",
              "      <td>-0.018980</td>\n",
              "      <td>-0.009397</td>\n",
              "      <td>-0.009645</td>\n",
              "      <td>-0.011089</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-08-31</th>\n",
              "      <td>0.012697</td>\n",
              "      <td>-0.007805</td>\n",
              "      <td>0.019397</td>\n",
              "      <td>-0.007677</td>\n",
              "      <td>-0.008861</td>\n",
              "      <td>-0.007848</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-09-01</th>\n",
              "      <td>0.003852</td>\n",
              "      <td>0.003091</td>\n",
              "      <td>0.020697</td>\n",
              "      <td>0.004146</td>\n",
              "      <td>0.004622</td>\n",
              "      <td>0.002992</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2023-10-31</th>\n",
              "      <td>0.004783</td>\n",
              "      <td>0.006311</td>\n",
              "      <td>0.003513</td>\n",
              "      <td>0.003568</td>\n",
              "      <td>0.003756</td>\n",
              "      <td>0.006454</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2023-11-01</th>\n",
              "      <td>0.021953</td>\n",
              "      <td>0.010333</td>\n",
              "      <td>0.016722</td>\n",
              "      <td>0.006498</td>\n",
              "      <td>0.006685</td>\n",
              "      <td>0.010451</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2023-11-02</th>\n",
              "      <td>-0.014182</td>\n",
              "      <td>0.018565</td>\n",
              "      <td>-0.025480</td>\n",
              "      <td>0.016740</td>\n",
              "      <td>0.016823</td>\n",
              "      <td>0.018683</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2023-11-03</th>\n",
              "      <td>-0.005911</td>\n",
              "      <td>0.009240</td>\n",
              "      <td>0.017711</td>\n",
              "      <td>0.006554</td>\n",
              "      <td>0.006546</td>\n",
              "      <td>0.009350</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2023-11-06</th>\n",
              "      <td>0.008744</td>\n",
              "      <td>0.001884</td>\n",
              "      <td>0.035926</td>\n",
              "      <td>0.000791</td>\n",
              "      <td>0.001014</td>\n",
              "      <td>0.001751</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>301 rows × 6 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1f6daeb5-68dc-4acc-93b6-b012cfeca1e9')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1f6daeb5-68dc-4acc-93b6-b012cfeca1e9 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1f6daeb5-68dc-4acc-93b6-b012cfeca1e9');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9c367c4b-2ad5-4f5c-b802-318f33437cde\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9c367c4b-2ad5-4f5c-b802-318f33437cde')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9c367c4b-2ad5-4f5c-b802-318f33437cde button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 49
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.feature_selection import SelectKBest, f_regression\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "\n",
        "# 'BTC-USD' is the target variable, and other columns are explanatory variables\n",
        "# Separate the target variable and explanatory variables\n",
        "X = df.drop('BTC-USD', axis=1)\n",
        "y = df['BTC-USD']\n",
        "\n",
        "# Split the data into training and testing sets\n",
        "# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "# Define the proportion of data to use for training\n",
        "train_proportion = 0.8  # 80% of the data for training\n",
        "\n",
        "# Calculate the number of samples for training\n",
        "num_samples = len(df)\n",
        "num_train_samples = int(train_proportion * num_samples)\n",
        "num_test_samples = num_samples - num_train_samples\n",
        "\n",
        "# Split the data into training and testing sets\n",
        "X_train, X_test = X[:num_train_samples], X[num_train_samples:]\n",
        "y_train, y_test = y[:num_train_samples], y[num_train_samples:]\n",
        "\n",
        "# Standardize the data (scaling can help some models, including Random Forest)\n",
        "scaler = StandardScaler()\n",
        "X_train = scaler.fit_transform(X_train)\n",
        "X_test = scaler.transform(X_test)\n",
        "\n",
        "# Perform feature selection (e.g., using SelectKBest and f_regression)\n",
        "# You can choose a different feature selection method and number of top features\n",
        "num_features_to_select = 5\n",
        "selector = SelectKBest(score_func=f_regression, k=num_features_to_select)\n",
        "X_train_selected = selector.fit_transform(X_train, y_train)\n",
        "X_test_selected = selector.transform(X_test)\n",
        "\n",
        "# Get the indices of the selected features\n",
        "selected_feature_indices = selector.get_support(indices=True)\n",
        "\n",
        "# Get the names of the selected features\n",
        "selected_feature_names = X.columns[selected_feature_indices]\n",
        "\n",
        "# Train a model (e.g., Random Forest) using the selected features\n",
        "model = RandomForestRegressor(n_estimators=100, random_state=42)\n",
        "model.fit(X_train_selected, y_train)\n",
        "\n",
        "# Evaluate the model\n",
        "y_pred = model.predict(X_test_selected)\n",
        "\n",
        "# You can then assess the model's performance using evaluation metrics (e.g., MAE, MSE, RMSE)\n"
      ],
      "metadata": {
        "id": "XLvzD28G0QEJ"
      },
      "execution_count": 33,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "M39e3VDx37Tb",
        "outputId": "5857d5bd-803c-4aba-84de-b7c5e2e074bc"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1204, 7)"
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import LSTM, Dense\n",
        "from tensorflow.keras.optimizers import SGD\n",
        "\n",
        "def create_LSTM_model(neurons=32, learn_rate=0.01, momentum=0):\n",
        "    # Create the model\n",
        "    LSTM_model = Sequential()\n",
        "    LSTM_model.add(LSTM(neurons, input_shape=(X_train.shape[1], X_train.shape[2])))\n",
        "    LSTM_model.add(Dense(1))\n",
        "\n",
        "    # Use the optimizer you defined\n",
        "    optimizer = SGD(lr=learn_rate, momentum=momentum)\n",
        "    LSTM_model.compile(loss='mse', optimizer=optimizer)\n",
        "\n",
        "    return LSTM_model\n"
      ],
      "metadata": {
        "id": "t26CsZuH3yHx"
      },
      "execution_count": 35,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Reshape the input data\n",
        "X_train = np.reshape(X_train, (X_train.shape[0], 1, X_train.shape[1]))\n",
        "X_test = np.reshape(X_test, (X_test.shape[0], 1, X_test.shape[1]))\n"
      ],
      "metadata": {
        "id": "QI8J9MdOG5Cu"
      },
      "execution_count": 36,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "LSTMModel = create_LSTM_model(12, learn_rate = 0.01, momentum=0)\n",
        "LSTMModel_fit = LSTMModel.fit(X_train, y_train, validation_data=(X_test, y_test),epochs=330, batch_size=72, verbose=0, shuffle=False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "74PpoR1M4FsH",
        "outputId": "1031c7cf-2ebb-44a4-cf5b-15255e2cab24"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:`lr` is deprecated in Keras optimizer, please use `learning_rate` or use the legacy optimizer, e.g.,tf.keras.optimizers.legacy.SGD.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "selected_feature_names"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "U58eXvvH2Mu0",
        "outputId": "f50c6dcd-91c9-4da5-cb5d-1146f48a9929"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['ES=F', 'ETH-USD', 'YM=F', '^DJI', '^GSPC'], dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "LSTM_predict = LSTMModel.predict(X_test)\n",
        "LSTM_predict"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yRAalJh0HWLe",
        "outputId": "13ce4c15-364b-4ea4-eb5e-cf8a032ff86e"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "10/10 [==============================] - 0s 2ms/step\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[-0.13329938],\n",
              "       [ 0.0129786 ],\n",
              "       [-0.04193583],\n",
              "       [-0.0026869 ],\n",
              "       [ 0.02629541],\n",
              "       [ 0.00387576],\n",
              "       [ 0.00126606],\n",
              "       [ 0.02333792],\n",
              "       [-0.00626905],\n",
              "       [ 0.06727406],\n",
              "       [ 0.00079771],\n",
              "       [-0.02639535],\n",
              "       [ 0.02127959],\n",
              "       [-0.10570177],\n",
              "       [-0.01105914],\n",
              "       [-0.04363852],\n",
              "       [-0.05169906],\n",
              "       [-0.03006225],\n",
              "       [ 0.03907264],\n",
              "       [ 0.0546858 ],\n",
              "       [ 0.02232348],\n",
              "       [-0.00142927],\n",
              "       [ 0.00810505],\n",
              "       [-0.04973684],\n",
              "       [-0.00700839],\n",
              "       [-0.01878827],\n",
              "       [ 0.02784658],\n",
              "       [ 0.02386237],\n",
              "       [ 0.03428081],\n",
              "       [-0.03768021],\n",
              "       [-0.02834553],\n",
              "       [ 0.00218857],\n",
              "       [-0.00512543],\n",
              "       [ 0.01969792],\n",
              "       [ 0.00977905],\n",
              "       [ 0.02807923],\n",
              "       [-0.02539799],\n",
              "       [ 0.0100826 ],\n",
              "       [-0.01054188],\n",
              "       [ 0.01712387],\n",
              "       [ 0.02737788],\n",
              "       [ 0.14735492],\n",
              "       [ 0.0989887 ],\n",
              "       [ 0.02265997],\n",
              "       [ 0.01815891],\n",
              "       [ 0.02102238],\n",
              "       [ 0.00567637],\n",
              "       [-0.09673189],\n",
              "       [ 0.05970228],\n",
              "       [ 0.10869237],\n",
              "       [-0.03164559],\n",
              "       [ 0.00865112],\n",
              "       [-0.08983243],\n",
              "       [ 0.12420017],\n",
              "       [ 0.0165688 ],\n",
              "       [-0.00697034],\n",
              "       [ 0.00176262],\n",
              "       [-0.04093093],\n",
              "       [-0.00743156],\n",
              "       [-0.00085693],\n",
              "       [-0.00796794],\n",
              "       [ 0.03365778],\n",
              "       [ 0.09292176],\n",
              "       [ 0.01003527],\n",
              "       [-0.0104954 ],\n",
              "       [ 0.02242451],\n",
              "       [ 0.06398516],\n",
              "       [-0.02153349],\n",
              "       [ 0.00238346],\n",
              "       [-0.01000379],\n",
              "       [ 0.00103995],\n",
              "       [-0.01714155],\n",
              "       [ 0.0369944 ],\n",
              "       [-0.00073519],\n",
              "       [-0.00295795],\n",
              "       [ 0.05816831],\n",
              "       [-0.02595365],\n",
              "       [-0.01577968],\n",
              "       [-0.03309912],\n",
              "       [-0.02516548],\n",
              "       [ 0.06222863],\n",
              "       [-0.00818296],\n",
              "       [-0.01483956],\n",
              "       [ 0.0017808 ],\n",
              "       [ 0.00583046],\n",
              "       [-0.02187853],\n",
              "       [ 0.00150875],\n",
              "       [-0.00734416],\n",
              "       [ 0.05303696],\n",
              "       [ 0.02661548],\n",
              "       [ 0.00916258],\n",
              "       [ 0.0170118 ],\n",
              "       [ 0.07200675],\n",
              "       [-0.00080075],\n",
              "       [ 0.0175901 ],\n",
              "       [ 0.04557732],\n",
              "       [ 0.01198871],\n",
              "       [ 0.04203863],\n",
              "       [-0.03696168],\n",
              "       [ 0.02493539],\n",
              "       [ 0.03240133],\n",
              "       [-0.02832656],\n",
              "       [-0.02917736],\n",
              "       [ 0.02902153],\n",
              "       [-0.02064951],\n",
              "       [-0.0057286 ],\n",
              "       [-0.02042234],\n",
              "       [-0.00159137],\n",
              "       [ 0.07319783],\n",
              "       [-0.02510446],\n",
              "       [ 0.05589173],\n",
              "       [ 0.01522882],\n",
              "       [ 0.0200234 ],\n",
              "       [-0.01907828],\n",
              "       [-0.07903915],\n",
              "       [-0.00391621],\n",
              "       [-0.01629532],\n",
              "       [ 0.02433761],\n",
              "       [ 0.02783062],\n",
              "       [-0.01899536],\n",
              "       [ 0.01583526],\n",
              "       [-0.02697712],\n",
              "       [-0.00158374],\n",
              "       [-0.00857388],\n",
              "       [-0.0091664 ],\n",
              "       [ 0.02328193],\n",
              "       [ 0.0019404 ],\n",
              "       [ 0.02568762],\n",
              "       [ 0.00296947],\n",
              "       [-0.04941468],\n",
              "       [-0.00562007],\n",
              "       [ 0.03047877],\n",
              "       [-0.01686241],\n",
              "       [-0.05900988],\n",
              "       [-0.0041499 ],\n",
              "       [ 0.06496961],\n",
              "       [ 0.00561131],\n",
              "       [ 0.05040178],\n",
              "       [-0.00770917],\n",
              "       [ 0.03834067],\n",
              "       [-0.01014686],\n",
              "       [ 0.02678433],\n",
              "       [-0.07122816],\n",
              "       [ 0.00568564],\n",
              "       [-0.01602152],\n",
              "       [-0.05536497],\n",
              "       [ 0.03249369],\n",
              "       [-0.01087881],\n",
              "       [ 0.00595975],\n",
              "       [-0.00282578],\n",
              "       [ 0.01014019],\n",
              "       [ 0.03642514],\n",
              "       [ 0.01007593],\n",
              "       [-0.02609012],\n",
              "       [ 0.00358272],\n",
              "       [ 0.00420073],\n",
              "       [ 0.01541004],\n",
              "       [ 0.02817179],\n",
              "       [ 0.02870372],\n",
              "       [-0.00133616],\n",
              "       [ 0.01614194],\n",
              "       [-0.05396993],\n",
              "       [ 0.00447585],\n",
              "       [-0.06889496],\n",
              "       [ 0.00131629],\n",
              "       [ 0.01520457],\n",
              "       [-0.00893947],\n",
              "       [-0.00503762],\n",
              "       [-0.01204016],\n",
              "       [-0.0095451 ],\n",
              "       [ 0.0382958 ],\n",
              "       [ 0.02469224],\n",
              "       [ 0.01033469],\n",
              "       [ 0.06192716],\n",
              "       [-0.03065479],\n",
              "       [ 0.00670107],\n",
              "       [-0.00998902],\n",
              "       [-0.00868774],\n",
              "       [ 0.01361173],\n",
              "       [ 0.00319987],\n",
              "       [-0.00784395],\n",
              "       [-0.00777799],\n",
              "       [-0.00835925],\n",
              "       [ 0.01566523],\n",
              "       [-0.00301711],\n",
              "       [ 0.00465315],\n",
              "       [-0.01841011],\n",
              "       [-0.00900547],\n",
              "       [-0.00290029],\n",
              "       [ 0.02354341],\n",
              "       [-0.00707434],\n",
              "       [ 0.00160563],\n",
              "       [ 0.03044892],\n",
              "       [-0.03199442],\n",
              "       [ 0.01974091],\n",
              "       [-0.05189717],\n",
              "       [ 0.02073766],\n",
              "       [-0.00625604],\n",
              "       [-0.04572421],\n",
              "       [-0.01290165],\n",
              "       [-0.03526722],\n",
              "       [ 0.02582186],\n",
              "       [-0.02623833],\n",
              "       [ 0.02200638],\n",
              "       [ 0.04470696],\n",
              "       [-0.01401495],\n",
              "       [ 0.02067477],\n",
              "       [-0.01970644],\n",
              "       [ 0.00420411],\n",
              "       [-0.01323859],\n",
              "       [ 0.01017759],\n",
              "       [ 0.04218942],\n",
              "       [ 0.00436275],\n",
              "       [-0.01051925],\n",
              "       [-0.04340233],\n",
              "       [ 0.03246335],\n",
              "       [ 0.00360188],\n",
              "       [ 0.00377011],\n",
              "       [ 0.01780326],\n",
              "       [ 0.11653138],\n",
              "       [-0.01611119],\n",
              "       [-0.02206957],\n",
              "       [-0.0004611 ],\n",
              "       [ 0.00050976],\n",
              "       [ 0.01196737],\n",
              "       [-0.00279946],\n",
              "       [-0.01391381],\n",
              "       [-0.00108259],\n",
              "       [ 0.00975668],\n",
              "       [ 0.01915995],\n",
              "       [-0.00197624],\n",
              "       [-0.00073303],\n",
              "       [ 0.00327635],\n",
              "       [-0.02089606],\n",
              "       [-0.00976231],\n",
              "       [-0.00628753],\n",
              "       [-0.00378554],\n",
              "       [ 0.00810683],\n",
              "       [-0.01776451],\n",
              "       [-0.00530486],\n",
              "       [ 0.00062445],\n",
              "       [-0.00757001],\n",
              "       [-0.02610856],\n",
              "       [-0.01618046],\n",
              "       [-0.06023525],\n",
              "       [-0.01443582],\n",
              "       [-0.00215433],\n",
              "       [-0.00734263],\n",
              "       [ 0.0006022 ],\n",
              "       [ 0.00275674],\n",
              "       [-0.01042311],\n",
              "       [-0.00321137],\n",
              "       [ 0.03904851],\n",
              "       [-0.01107255],\n",
              "       [-0.01457189],\n",
              "       [ 0.00915954],\n",
              "       [ 0.00411068],\n",
              "       [-0.01489886],\n",
              "       [ 0.00283395],\n",
              "       [-0.00741191],\n",
              "       [-0.05182965],\n",
              "       [ 0.00218416],\n",
              "       [ 0.00276406],\n",
              "       [ 0.00634174],\n",
              "       [-0.01102091],\n",
              "       [-0.00585462],\n",
              "       [ 0.00148377],\n",
              "       [-0.00707134],\n",
              "       [-0.04277618],\n",
              "       [ 0.00611616],\n",
              "       [-0.00646172],\n",
              "       [-0.01861201],\n",
              "       [ 0.00023648],\n",
              "       [ 0.0373167 ],\n",
              "       [-0.00522448],\n",
              "       [ 0.01087769],\n",
              "       [-0.01834669],\n",
              "       [-0.01507348],\n",
              "       [-0.03057132],\n",
              "       [ 0.00945527],\n",
              "       [-0.0152513 ],\n",
              "       [-0.00468302],\n",
              "       [-0.00127767],\n",
              "       [ 0.0126725 ],\n",
              "       [ 0.0277051 ],\n",
              "       [ 0.03466336],\n",
              "       [-0.01799037],\n",
              "       [ 0.04714953],\n",
              "       [ 0.00270494],\n",
              "       [ 0.01420812],\n",
              "       [ 0.119118  ],\n",
              "       [ 0.00784958],\n",
              "       [-0.00225687],\n",
              "       [-0.00443999],\n",
              "       [-0.00562543],\n",
              "       [ 0.03203197],\n",
              "       [-0.00154495],\n",
              "       [-0.00300506],\n",
              "       [-0.02003537],\n",
              "       [ 0.04798757],\n",
              "       [ 0.01498737]], dtype=float32)"
            ]
          },
          "metadata": {},
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_test"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hquv06UCEU24",
        "outputId": "f1eaca1a-6c04-4fa7-b036-c50f7a1a849b"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[[ 0.71293147, -2.56845979, -1.89368491, ..., -2.28886146,\n",
              "         -2.27263159, -2.56748885]],\n",
              "\n",
              "       [[ 0.06159804, -0.54730461,  0.44751388, ..., -0.45133999,\n",
              "         -0.44059263, -0.52515467]],\n",
              "\n",
              "       [[-0.12482042, -0.83838641, -0.32326838, ..., -0.71268239,\n",
              "         -0.72729572, -0.85103635]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[-1.78815459,  1.34557718, -0.42645502, ...,  1.20988547,\n",
              "          1.2100955 ,  1.35365245]],\n",
              "\n",
              "       [[-2.71727219,  0.65472617,  0.25920522, ...,  0.46062137,\n",
              "          0.45788625,  0.66252532]],\n",
              "\n",
              "       [[ 0.42230238,  0.10964442,  0.54838165, ...,  0.03669141,\n",
              "          0.05291227,  0.09985018]]])"
            ]
          },
          "metadata": {},
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# # Sample time index (replace with your actual time index)\n",
        "# time_index = np.arange(len(X_test))\n",
        "\n",
        "# # Flatten the LSTM predictions to make them 1D\n",
        "# LSTM_predict_flat = LSTM_predict.flatten()\n",
        "\n",
        "# # Create a DataFrame with the same time index\n",
        "# predictions_df = pd.DataFrame({'Time Index': time_index, 'LSTM Predictions': LSTM_predict_flat})\n",
        "\n",
        "\n",
        "# # Print or work with the DataFrame\n",
        "# print(predictions_df)\n",
        "\n",
        "# Create a DataFrame with the same index and LSTM predictions\n",
        "predictions_df = pd.DataFrame({'LSTM Predictions': LSTM_pred}, index=test_data.index)\n",
        "\n",
        "# Print or work with the DataFrame\n",
        "print(predictions_df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "r19CsPIKDn0z",
        "outputId": "a066bd7e-8c50-4c28-f03e-d4be38e91b88"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "            LSTM Predictions\n",
            "Date                        \n",
            "2022-08-26         -0.133299\n",
            "2022-08-29          0.012979\n",
            "2022-08-30         -0.041936\n",
            "2022-08-31         -0.002687\n",
            "2022-09-01          0.026295\n",
            "...                      ...\n",
            "2023-10-31         -0.001545\n",
            "2023-11-01         -0.003005\n",
            "2023-11-02         -0.020035\n",
            "2023-11-03          0.047988\n",
            "2023-11-06          0.014987\n",
            "\n",
            "[301 rows x 1 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "LSTM_predict"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_oZfDE9wInCS",
        "outputId": "cc20e9c4-639d-4e75-ba85-1c05816b5664"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[-0.13329938],\n",
              "       [ 0.0129786 ],\n",
              "       [-0.04193583],\n",
              "       [-0.0026869 ],\n",
              "       [ 0.02629541],\n",
              "       [ 0.00387576],\n",
              "       [ 0.00126606],\n",
              "       [ 0.02333792],\n",
              "       [-0.00626905],\n",
              "       [ 0.06727406],\n",
              "       [ 0.00079771],\n",
              "       [-0.02639535],\n",
              "       [ 0.02127959],\n",
              "       [-0.10570177],\n",
              "       [-0.01105914],\n",
              "       [-0.04363852],\n",
              "       [-0.05169906],\n",
              "       [-0.03006225],\n",
              "       [ 0.03907264],\n",
              "       [ 0.0546858 ],\n",
              "       [ 0.02232348],\n",
              "       [-0.00142927],\n",
              "       [ 0.00810505],\n",
              "       [-0.04973684],\n",
              "       [-0.00700839],\n",
              "       [-0.01878827],\n",
              "       [ 0.02784658],\n",
              "       [ 0.02386237],\n",
              "       [ 0.03428081],\n",
              "       [-0.03768021],\n",
              "       [-0.02834553],\n",
              "       [ 0.00218857],\n",
              "       [-0.00512543],\n",
              "       [ 0.01969792],\n",
              "       [ 0.00977905],\n",
              "       [ 0.02807923],\n",
              "       [-0.02539799],\n",
              "       [ 0.0100826 ],\n",
              "       [-0.01054188],\n",
              "       [ 0.01712387],\n",
              "       [ 0.02737788],\n",
              "       [ 0.14735492],\n",
              "       [ 0.0989887 ],\n",
              "       [ 0.02265997],\n",
              "       [ 0.01815891],\n",
              "       [ 0.02102238],\n",
              "       [ 0.00567637],\n",
              "       [-0.09673189],\n",
              "       [ 0.05970228],\n",
              "       [ 0.10869237],\n",
              "       [-0.03164559],\n",
              "       [ 0.00865112],\n",
              "       [-0.08983243],\n",
              "       [ 0.12420017],\n",
              "       [ 0.0165688 ],\n",
              "       [-0.00697034],\n",
              "       [ 0.00176262],\n",
              "       [-0.04093093],\n",
              "       [-0.00743156],\n",
              "       [-0.00085693],\n",
              "       [-0.00796794],\n",
              "       [ 0.03365778],\n",
              "       [ 0.09292176],\n",
              "       [ 0.01003527],\n",
              "       [-0.0104954 ],\n",
              "       [ 0.02242451],\n",
              "       [ 0.06398516],\n",
              "       [-0.02153349],\n",
              "       [ 0.00238346],\n",
              "       [-0.01000379],\n",
              "       [ 0.00103995],\n",
              "       [-0.01714155],\n",
              "       [ 0.0369944 ],\n",
              "       [-0.00073519],\n",
              "       [-0.00295795],\n",
              "       [ 0.05816831],\n",
              "       [-0.02595365],\n",
              "       [-0.01577968],\n",
              "       [-0.03309912],\n",
              "       [-0.02516548],\n",
              "       [ 0.06222863],\n",
              "       [-0.00818296],\n",
              "       [-0.01483956],\n",
              "       [ 0.0017808 ],\n",
              "       [ 0.00583046],\n",
              "       [-0.02187853],\n",
              "       [ 0.00150875],\n",
              "       [-0.00734416],\n",
              "       [ 0.05303696],\n",
              "       [ 0.02661548],\n",
              "       [ 0.00916258],\n",
              "       [ 0.0170118 ],\n",
              "       [ 0.07200675],\n",
              "       [-0.00080075],\n",
              "       [ 0.0175901 ],\n",
              "       [ 0.04557732],\n",
              "       [ 0.01198871],\n",
              "       [ 0.04203863],\n",
              "       [-0.03696168],\n",
              "       [ 0.02493539],\n",
              "       [ 0.03240133],\n",
              "       [-0.02832656],\n",
              "       [-0.02917736],\n",
              "       [ 0.02902153],\n",
              "       [-0.02064951],\n",
              "       [-0.0057286 ],\n",
              "       [-0.02042234],\n",
              "       [-0.00159137],\n",
              "       [ 0.07319783],\n",
              "       [-0.02510446],\n",
              "       [ 0.05589173],\n",
              "       [ 0.01522882],\n",
              "       [ 0.0200234 ],\n",
              "       [-0.01907828],\n",
              "       [-0.07903915],\n",
              "       [-0.00391621],\n",
              "       [-0.01629532],\n",
              "       [ 0.02433761],\n",
              "       [ 0.02783062],\n",
              "       [-0.01899536],\n",
              "       [ 0.01583526],\n",
              "       [-0.02697712],\n",
              "       [-0.00158374],\n",
              "       [-0.00857388],\n",
              "       [-0.0091664 ],\n",
              "       [ 0.02328193],\n",
              "       [ 0.0019404 ],\n",
              "       [ 0.02568762],\n",
              "       [ 0.00296947],\n",
              "       [-0.04941468],\n",
              "       [-0.00562007],\n",
              "       [ 0.03047877],\n",
              "       [-0.01686241],\n",
              "       [-0.05900988],\n",
              "       [-0.0041499 ],\n",
              "       [ 0.06496961],\n",
              "       [ 0.00561131],\n",
              "       [ 0.05040178],\n",
              "       [-0.00770917],\n",
              "       [ 0.03834067],\n",
              "       [-0.01014686],\n",
              "       [ 0.02678433],\n",
              "       [-0.07122816],\n",
              "       [ 0.00568564],\n",
              "       [-0.01602152],\n",
              "       [-0.05536497],\n",
              "       [ 0.03249369],\n",
              "       [-0.01087881],\n",
              "       [ 0.00595975],\n",
              "       [-0.00282578],\n",
              "       [ 0.01014019],\n",
              "       [ 0.03642514],\n",
              "       [ 0.01007593],\n",
              "       [-0.02609012],\n",
              "       [ 0.00358272],\n",
              "       [ 0.00420073],\n",
              "       [ 0.01541004],\n",
              "       [ 0.02817179],\n",
              "       [ 0.02870372],\n",
              "       [-0.00133616],\n",
              "       [ 0.01614194],\n",
              "       [-0.05396993],\n",
              "       [ 0.00447585],\n",
              "       [-0.06889496],\n",
              "       [ 0.00131629],\n",
              "       [ 0.01520457],\n",
              "       [-0.00893947],\n",
              "       [-0.00503762],\n",
              "       [-0.01204016],\n",
              "       [-0.0095451 ],\n",
              "       [ 0.0382958 ],\n",
              "       [ 0.02469224],\n",
              "       [ 0.01033469],\n",
              "       [ 0.06192716],\n",
              "       [-0.03065479],\n",
              "       [ 0.00670107],\n",
              "       [-0.00998902],\n",
              "       [-0.00868774],\n",
              "       [ 0.01361173],\n",
              "       [ 0.00319987],\n",
              "       [-0.00784395],\n",
              "       [-0.00777799],\n",
              "       [-0.00835925],\n",
              "       [ 0.01566523],\n",
              "       [-0.00301711],\n",
              "       [ 0.00465315],\n",
              "       [-0.01841011],\n",
              "       [-0.00900547],\n",
              "       [-0.00290029],\n",
              "       [ 0.02354341],\n",
              "       [-0.00707434],\n",
              "       [ 0.00160563],\n",
              "       [ 0.03044892],\n",
              "       [-0.03199442],\n",
              "       [ 0.01974091],\n",
              "       [-0.05189717],\n",
              "       [ 0.02073766],\n",
              "       [-0.00625604],\n",
              "       [-0.04572421],\n",
              "       [-0.01290165],\n",
              "       [-0.03526722],\n",
              "       [ 0.02582186],\n",
              "       [-0.02623833],\n",
              "       [ 0.02200638],\n",
              "       [ 0.04470696],\n",
              "       [-0.01401495],\n",
              "       [ 0.02067477],\n",
              "       [-0.01970644],\n",
              "       [ 0.00420411],\n",
              "       [-0.01323859],\n",
              "       [ 0.01017759],\n",
              "       [ 0.04218942],\n",
              "       [ 0.00436275],\n",
              "       [-0.01051925],\n",
              "       [-0.04340233],\n",
              "       [ 0.03246335],\n",
              "       [ 0.00360188],\n",
              "       [ 0.00377011],\n",
              "       [ 0.01780326],\n",
              "       [ 0.11653138],\n",
              "       [-0.01611119],\n",
              "       [-0.02206957],\n",
              "       [-0.0004611 ],\n",
              "       [ 0.00050976],\n",
              "       [ 0.01196737],\n",
              "       [-0.00279946],\n",
              "       [-0.01391381],\n",
              "       [-0.00108259],\n",
              "       [ 0.00975668],\n",
              "       [ 0.01915995],\n",
              "       [-0.00197624],\n",
              "       [-0.00073303],\n",
              "       [ 0.00327635],\n",
              "       [-0.02089606],\n",
              "       [-0.00976231],\n",
              "       [-0.00628753],\n",
              "       [-0.00378554],\n",
              "       [ 0.00810683],\n",
              "       [-0.01776451],\n",
              "       [-0.00530486],\n",
              "       [ 0.00062445],\n",
              "       [-0.00757001],\n",
              "       [-0.02610856],\n",
              "       [-0.01618046],\n",
              "       [-0.06023525],\n",
              "       [-0.01443582],\n",
              "       [-0.00215433],\n",
              "       [-0.00734263],\n",
              "       [ 0.0006022 ],\n",
              "       [ 0.00275674],\n",
              "       [-0.01042311],\n",
              "       [-0.00321137],\n",
              "       [ 0.03904851],\n",
              "       [-0.01107255],\n",
              "       [-0.01457189],\n",
              "       [ 0.00915954],\n",
              "       [ 0.00411068],\n",
              "       [-0.01489886],\n",
              "       [ 0.00283395],\n",
              "       [-0.00741191],\n",
              "       [-0.05182965],\n",
              "       [ 0.00218416],\n",
              "       [ 0.00276406],\n",
              "       [ 0.00634174],\n",
              "       [-0.01102091],\n",
              "       [-0.00585462],\n",
              "       [ 0.00148377],\n",
              "       [-0.00707134],\n",
              "       [-0.04277618],\n",
              "       [ 0.00611616],\n",
              "       [-0.00646172],\n",
              "       [-0.01861201],\n",
              "       [ 0.00023648],\n",
              "       [ 0.0373167 ],\n",
              "       [-0.00522448],\n",
              "       [ 0.01087769],\n",
              "       [-0.01834669],\n",
              "       [-0.01507348],\n",
              "       [-0.03057132],\n",
              "       [ 0.00945527],\n",
              "       [-0.0152513 ],\n",
              "       [-0.00468302],\n",
              "       [-0.00127767],\n",
              "       [ 0.0126725 ],\n",
              "       [ 0.0277051 ],\n",
              "       [ 0.03466336],\n",
              "       [-0.01799037],\n",
              "       [ 0.04714953],\n",
              "       [ 0.00270494],\n",
              "       [ 0.01420812],\n",
              "       [ 0.119118  ],\n",
              "       [ 0.00784958],\n",
              "       [-0.00225687],\n",
              "       [-0.00443999],\n",
              "       [-0.00562543],\n",
              "       [ 0.03203197],\n",
              "       [-0.00154495],\n",
              "       [-0.00300506],\n",
              "       [-0.02003537],\n",
              "       [ 0.04798757],\n",
              "       [ 0.01498737]], dtype=float32)"
            ]
          },
          "metadata": {},
          "execution_count": 51
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "LSTM_pred=list(LSTM_predict.reshape(-1))\n",
        "LSTM_pred"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DvsP2u6XItTj",
        "outputId": "95a24d50-e1b2-49d3-e28c-63f6f20ca67f"
      },
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[-0.13329938,\n",
              " 0.012978604,\n",
              " -0.04193583,\n",
              " -0.0026869047,\n",
              " 0.026295407,\n",
              " 0.003875764,\n",
              " 0.0012660567,\n",
              " 0.023337921,\n",
              " -0.006269045,\n",
              " 0.067274064,\n",
              " 0.0007977057,\n",
              " -0.026395345,\n",
              " 0.021279586,\n",
              " -0.10570177,\n",
              " -0.011059135,\n",
              " -0.04363852,\n",
              " -0.05169906,\n",
              " -0.030062249,\n",
              " 0.03907264,\n",
              " 0.0546858,\n",
              " 0.02232348,\n",
              " -0.0014292728,\n",
              " 0.008105049,\n",
              " -0.049736835,\n",
              " -0.007008387,\n",
              " -0.018788269,\n",
              " 0.027846584,\n",
              " 0.023862375,\n",
              " 0.034280807,\n",
              " -0.03768021,\n",
              " -0.02834553,\n",
              " 0.002188569,\n",
              " -0.005125433,\n",
              " 0.019697921,\n",
              " 0.009779049,\n",
              " 0.028079232,\n",
              " -0.02539799,\n",
              " 0.010082597,\n",
              " -0.010541877,\n",
              " 0.017123869,\n",
              " 0.02737788,\n",
              " 0.14735492,\n",
              " 0.098988704,\n",
              " 0.022659967,\n",
              " 0.01815891,\n",
              " 0.021022385,\n",
              " 0.0056763683,\n",
              " -0.09673189,\n",
              " 0.059702277,\n",
              " 0.10869237,\n",
              " -0.03164559,\n",
              " 0.008651117,\n",
              " -0.08983243,\n",
              " 0.12420017,\n",
              " 0.0165688,\n",
              " -0.0069703404,\n",
              " 0.001762623,\n",
              " -0.040930927,\n",
              " -0.0074315555,\n",
              " -0.00085692666,\n",
              " -0.007967943,\n",
              " 0.03365778,\n",
              " 0.092921756,\n",
              " 0.010035271,\n",
              " -0.010495396,\n",
              " 0.022424513,\n",
              " 0.06398516,\n",
              " -0.021533491,\n",
              " 0.002383465,\n",
              " -0.01000379,\n",
              " 0.0010399539,\n",
              " -0.017141555,\n",
              " 0.036994398,\n",
              " -0.0007351879,\n",
              " -0.0029579494,\n",
              " 0.058168314,\n",
              " -0.025953649,\n",
              " -0.015779676,\n",
              " -0.033099122,\n",
              " -0.02516548,\n",
              " 0.062228628,\n",
              " -0.00818296,\n",
              " -0.01483956,\n",
              " 0.0017808024,\n",
              " 0.005830465,\n",
              " -0.02187853,\n",
              " 0.0015087519,\n",
              " -0.007344164,\n",
              " 0.053036958,\n",
              " 0.026615484,\n",
              " 0.009162581,\n",
              " 0.0170118,\n",
              " 0.072006755,\n",
              " -0.00080074556,\n",
              " 0.0175901,\n",
              " 0.045577325,\n",
              " 0.0119887125,\n",
              " 0.042038627,\n",
              " -0.036961682,\n",
              " 0.024935385,\n",
              " 0.03240133,\n",
              " -0.028326562,\n",
              " -0.029177362,\n",
              " 0.02902153,\n",
              " -0.020649511,\n",
              " -0.0057286024,\n",
              " -0.020422338,\n",
              " -0.0015913658,\n",
              " 0.073197834,\n",
              " -0.025104458,\n",
              " 0.05589173,\n",
              " 0.015228825,\n",
              " 0.020023404,\n",
              " -0.019078277,\n",
              " -0.07903915,\n",
              " -0.003916206,\n",
              " -0.01629532,\n",
              " 0.02433761,\n",
              " 0.027830625,\n",
              " -0.018995361,\n",
              " 0.015835265,\n",
              " -0.02697712,\n",
              " -0.0015837383,\n",
              " -0.008573877,\n",
              " -0.009166401,\n",
              " 0.023281926,\n",
              " 0.0019403975,\n",
              " 0.025687618,\n",
              " 0.0029694717,\n",
              " -0.04941468,\n",
              " -0.0056200735,\n",
              " 0.030478766,\n",
              " -0.016862411,\n",
              " -0.05900988,\n",
              " -0.0041499007,\n",
              " 0.06496961,\n",
              " 0.0056113135,\n",
              " 0.050401784,\n",
              " -0.0077091716,\n",
              " 0.038340673,\n",
              " -0.010146864,\n",
              " 0.026784332,\n",
              " -0.07122816,\n",
              " 0.005685637,\n",
              " -0.016021522,\n",
              " -0.055364974,\n",
              " 0.03249369,\n",
              " -0.010878807,\n",
              " 0.0059597474,\n",
              " -0.002825776,\n",
              " 0.01014019,\n",
              " 0.036425136,\n",
              " 0.010075929,\n",
              " -0.026090123,\n",
              " 0.0035827179,\n",
              " 0.0042007286,\n",
              " 0.015410038,\n",
              " 0.028171787,\n",
              " 0.028703725,\n",
              " -0.0013361592,\n",
              " 0.016141942,\n",
              " -0.053969935,\n",
              " 0.004475845,\n",
              " -0.06889496,\n",
              " 0.0013162922,\n",
              " 0.015204573,\n",
              " -0.008939473,\n",
              " -0.005037619,\n",
              " -0.012040164,\n",
              " -0.009545099,\n",
              " 0.038295798,\n",
              " 0.02469224,\n",
              " 0.010334691,\n",
              " 0.061927162,\n",
              " -0.03065479,\n",
              " 0.006701065,\n",
              " -0.009989016,\n",
              " -0.008687738,\n",
              " 0.013611732,\n",
              " 0.0031998735,\n",
              " -0.007843951,\n",
              " -0.007777989,\n",
              " -0.008359252,\n",
              " 0.015665231,\n",
              " -0.003017107,\n",
              " 0.004653154,\n",
              " -0.01841011,\n",
              " -0.009005474,\n",
              " -0.0029002894,\n",
              " 0.023543412,\n",
              " -0.0070743393,\n",
              " 0.0016056281,\n",
              " 0.030448923,\n",
              " -0.031994425,\n",
              " 0.019740907,\n",
              " -0.05189717,\n",
              " 0.020737665,\n",
              " -0.006256042,\n",
              " -0.045724213,\n",
              " -0.012901649,\n",
              " -0.03526722,\n",
              " 0.025821855,\n",
              " -0.026238326,\n",
              " 0.02200638,\n",
              " 0.044706956,\n",
              " -0.01401495,\n",
              " 0.02067477,\n",
              " -0.019706443,\n",
              " 0.004204115,\n",
              " -0.013238592,\n",
              " 0.010177592,\n",
              " 0.04218942,\n",
              " 0.0043627527,\n",
              " -0.0105192475,\n",
              " -0.04340233,\n",
              " 0.03246335,\n",
              " 0.003601877,\n",
              " 0.0037701149,\n",
              " 0.017803261,\n",
              " 0.11653138,\n",
              " -0.01611119,\n",
              " -0.02206957,\n",
              " -0.00046109594,\n",
              " 0.0005097557,\n",
              " 0.011967367,\n",
              " -0.0027994644,\n",
              " -0.013913814,\n",
              " -0.0010825917,\n",
              " 0.009756682,\n",
              " 0.019159952,\n",
              " -0.0019762423,\n",
              " -0.0007330254,\n",
              " 0.00327635,\n",
              " -0.020896062,\n",
              " -0.0097623095,\n",
              " -0.006287528,\n",
              " -0.0037855413,\n",
              " 0.00810683,\n",
              " -0.017764507,\n",
              " -0.0053048637,\n",
              " 0.00062445365,\n",
              " -0.007570006,\n",
              " -0.026108555,\n",
              " -0.01618046,\n",
              " -0.060235247,\n",
              " -0.01443582,\n",
              " -0.0021543317,\n",
              " -0.0073426273,\n",
              " 0.0006022025,\n",
              " 0.002756739,\n",
              " -0.010423109,\n",
              " -0.0032113716,\n",
              " 0.039048508,\n",
              " -0.011072554,\n",
              " -0.014571892,\n",
              " 0.009159537,\n",
              " 0.0041106846,\n",
              " -0.014898855,\n",
              " 0.0028339531,\n",
              " -0.007411914,\n",
              " -0.05182965,\n",
              " 0.0021841582,\n",
              " 0.0027640555,\n",
              " 0.0063417386,\n",
              " -0.011020908,\n",
              " -0.0058546215,\n",
              " 0.0014837664,\n",
              " -0.007071344,\n",
              " -0.042776182,\n",
              " 0.006116165,\n",
              " -0.006461717,\n",
              " -0.018612009,\n",
              " 0.00023647584,\n",
              " 0.037316702,\n",
              " -0.005224483,\n",
              " 0.010877693,\n",
              " -0.018346686,\n",
              " -0.01507348,\n",
              " -0.030571315,\n",
              " 0.009455269,\n",
              " -0.015251301,\n",
              " -0.004683016,\n",
              " -0.0012776684,\n",
              " 0.012672497,\n",
              " 0.027705098,\n",
              " 0.034663357,\n",
              " -0.017990367,\n",
              " 0.04714953,\n",
              " 0.0027049351,\n",
              " 0.014208125,\n",
              " 0.119118,\n",
              " 0.007849576,\n",
              " -0.0022568721,\n",
              " -0.0044399872,\n",
              " -0.0056254286,\n",
              " 0.03203197,\n",
              " -0.0015449543,\n",
              " -0.0030050557,\n",
              " -0.020035373,\n",
              " 0.047987573,\n",
              " 0.014987366]"
            ]
          },
          "metadata": {},
          "execution_count": 52
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BQcE800b2rgy",
        "outputId": "39fd100c-8470-4042-df98-7176322073e7"
      },
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([-8.44911205e-02,  1.46590683e-02, -1.16566649e-02,  9.39922688e-03,\n",
              "        1.47367888e-02,  1.71720800e-02,  2.65073783e-03,  2.75589726e-02,\n",
              "       -3.40184185e-03,  2.86962570e-02,  3.00940674e-03, -6.37378404e-02,\n",
              "        1.05209285e-02, -5.78018883e-02, -1.99706616e-02, -2.73114156e-02,\n",
              "       -3.34199016e-02, -9.62505206e-03,  2.95953605e-02, -5.16752306e-03,\n",
              "        1.13126532e-02,  1.09358459e-02, -3.30636759e-03, -4.54336833e-03,\n",
              "        3.18833487e-03, -1.31825008e-03,  3.13388765e-02, -2.94362872e-03,\n",
              "        7.55931695e-03, -5.87370412e-03, -2.08523456e-02, -1.56324561e-02,\n",
              "        2.34774062e-02,  8.40141382e-03,  1.44049053e-02,  1.89420718e-02,\n",
              "       -3.30712102e-03, -7.96923670e-03,  5.38808833e-03,  1.84208863e-02,\n",
              "        1.26872383e-02,  3.99662181e-02,  4.03091345e-02, -1.55324669e-02,\n",
              "        3.10352282e-02,  3.08051224e-02,  2.54475091e-03, -2.76855724e-02,\n",
              "        1.46440634e-02,  4.53443644e-02, -2.69580306e-02, -1.04615288e-01,\n",
              "       -1.43157248e-01,  9.27321089e-02,  2.10416960e-03, -3.48830405e-02,\n",
              "        1.98564334e-02, -1.90028658e-02, -7.81770704e-03,  6.21394258e-03,\n",
              "       -5.19435587e-02,  1.56195854e-02,  3.48645337e-02,  1.97188514e-02,\n",
              "       -2.23811641e-02,  2.84904072e-02,  4.26689893e-02, -1.82747900e-03,\n",
              "        1.57065427e-02, -2.33491963e-02,  2.08581095e-02, -1.77014671e-02,\n",
              "        4.10421703e-02,  1.15377381e-02,  2.52812283e-03,  2.97314639e-02,\n",
              "        2.65940322e-03, -2.48256120e-02, -5.70032453e-02,  8.22451958e-03,\n",
              "        3.27014210e-02, -3.86436280e-03, -3.17652881e-03,  4.09348524e-03,\n",
              "       -2.18795684e-03, -1.24215849e-02,  8.45784780e-03,  2.47471447e-03,\n",
              "        2.53179973e-02,  2.23857765e-02,  1.73453122e-02,  8.81113211e-03,\n",
              "        1.99756465e-02,  2.11390777e-02,  1.57896557e-02,  7.42487629e-03,\n",
              "        2.14611677e-02,  5.71644517e-02, -2.13253880e-02,  1.04360379e-02,\n",
              "        3.00943277e-02, -2.25182097e-03, -3.47333179e-02,  3.00911668e-02,\n",
              "        1.23097782e-02,  1.38250229e-03, -1.42405345e-02,  2.16018724e-02,\n",
              "        2.03003558e-02,  1.11735738e-02,  1.60530661e-02, -1.54822091e-02,\n",
              "        1.20527895e-02,  6.56394816e-03, -4.23488267e-02, -1.98010596e-02,\n",
              "        1.04490575e-02,  3.78178144e-02,  4.74346740e-02, -2.40130917e-02,\n",
              "        2.71204695e-02, -2.05647096e-02, -1.17661028e-02,  1.55251317e-03,\n",
              "       -2.33222347e-02,  4.98011038e-02, -2.38340679e-03,  3.64747765e-02,\n",
              "       -8.88192051e-03, -3.13318548e-02,  2.41184968e-03,  1.48881721e-03,\n",
              "       -3.41661323e-03, -5.46377614e-02,  5.37450053e-03,  7.72764482e-02,\n",
              "        1.88621384e-02, -2.32809451e-02,  2.02912157e-02,  5.54130685e-02,\n",
              "       -2.96126215e-02,  3.15326553e-02, -1.47879212e-02,  3.32748017e-02,\n",
              "       -2.94287189e-02, -2.09809339e-02,  3.86034294e-02,  1.25493466e-02,\n",
              "        5.66131742e-03,  3.75140337e-02,  1.63476584e-03,  3.08091418e-02,\n",
              "        1.58230119e-02, -1.05072505e-02,  2.30014782e-02, -1.12967476e-02,\n",
              "        1.38293830e-02,  2.98699370e-02,  3.91893897e-02, -2.12086657e-03,\n",
              "        3.93938763e-02, -4.45749180e-02,  4.20221857e-03, -1.83378331e-02,\n",
              "        4.76919609e-03,  8.83564450e-03,  1.58505867e-03,  2.43481421e-02,\n",
              "       -4.37098923e-03, -1.94088467e-02,  1.85209450e-02,  1.53263335e-02,\n",
              "       -4.94090964e-04,  4.21413249e-02, -3.58040071e-02,  6.01127142e-03,\n",
              "        5.25491526e-03, -1.76921512e-02,  1.85548102e-02,  1.90153922e-03,\n",
              "       -7.59007475e-04,  2.21421040e-03,  3.09945214e-03,  2.34182173e-02,\n",
              "        1.84753642e-03,  2.26202743e-02, -1.86788895e-02,  5.22899908e-03,\n",
              "        1.78605923e-02,  2.15996119e-02, -3.08728966e-03,  1.05967260e-02,\n",
              "        2.28403617e-02, -4.40473867e-02,  2.46948665e-02, -1.98633978e-02,\n",
              "        2.10484261e-02,  6.22544071e-03, -2.54909042e-02,  3.67948946e-03,\n",
              "       -3.64416340e-02,  1.06860780e-02,  2.60479525e-02,  3.03970548e-02,\n",
              "        3.17570477e-02, -5.08313190e-03,  2.58672327e-02, -3.07848392e-03,\n",
              "        5.94707144e-02, -1.95729790e-02,  1.58319772e-02,  2.67680458e-02,\n",
              "        6.43201483e-02, -1.74533152e-02, -2.04230799e-02,  1.75316058e-02,\n",
              "       -3.99995492e-03,  4.59325332e-03,  4.74665208e-03,  5.33817647e-02,\n",
              "       -1.09710815e-02, -8.06158662e-03,  2.03583614e-02, -3.98460500e-03,\n",
              "        3.21708369e-03,  3.31017140e-03, -2.11444852e-02,  1.14805489e-03,\n",
              "        6.76513392e-03,  3.93814243e-03,  1.51857654e-02, -3.52440428e-03,\n",
              "        3.39347771e-02, -4.77177718e-03,  1.46632053e-03,  4.42203195e-03,\n",
              "        9.20091755e-03,  9.51534210e-03,  9.52546611e-03,  2.98701596e-05,\n",
              "       -2.33527310e-03,  1.91056522e-02, -5.69614072e-03,  8.00338369e-03,\n",
              "       -4.52879574e-02, -1.34426963e-02, -3.42308568e-03, -6.47565503e-03,\n",
              "        1.50282457e-02,  7.78817029e-03,  5.24064426e-03,  7.78926465e-03,\n",
              "        2.85093242e-02, -1.03787681e-02, -2.88984520e-02, -2.22038635e-03,\n",
              "        2.31777267e-03,  6.92749715e-03,  3.77136088e-02,  1.59846774e-03,\n",
              "       -2.34078592e-02,  3.26707795e-02,  8.59754862e-03,  8.88902834e-03,\n",
              "        1.97732549e-02,  4.83140747e-03, -8.48981962e-03,  7.97447199e-03,\n",
              "       -2.15954170e-02,  3.46444012e-03,  6.27606743e-03,  4.87585889e-03,\n",
              "       -2.03114129e-04,  1.57613285e-02,  1.34132368e-02,  2.26442823e-03,\n",
              "        1.30970570e-02,  1.05011279e-02, -1.23933684e-02,  1.53521447e-02,\n",
              "       -3.91382188e-02, -4.64581643e-03,  7.76878125e-03, -5.50254778e-03,\n",
              "        2.55240983e-02,  2.15068325e-02, -1.30573397e-02,  6.36913580e-03,\n",
              "       -8.21475377e-04,  2.53778179e-02,  2.52098131e-02,  1.22734742e-02,\n",
              "        7.11653554e-03,  1.74172087e-02,  1.89598285e-02,  1.63416859e-02,\n",
              "       -7.85147856e-04,  2.57139666e-02, -1.19977941e-02,  2.33328104e-02,\n",
              "        2.73019287e-02])"
            ]
          },
          "metadata": {},
          "execution_count": 53
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "statsmodels.tools.eval_measures.meanabs(y_pred, y_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gn6pjfHD3QpZ",
        "outputId": "6c0daf96-4d5a-4ad2-8952-867ac18b9b35"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.013234649337884666"
            ]
          },
          "metadata": {},
          "execution_count": 54
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "statsmodels.tools.eval_measures.meanabs(LSTM_pred, y_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5OVskrFx3cbS",
        "outputId": "cc461aab-4aa7-4ece-87aa-ea350fa34654"
      },
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.019679793911782335"
            ]
          },
          "metadata": {},
          "execution_count": 55
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_test"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "K0wO2uEECvy5",
        "outputId": "690004e2-664c-4131-cc42-91b80b57e994"
      },
      "execution_count": 56,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Date\n",
              "2022-08-26   -0.064086\n",
              "2022-08-29    0.001873\n",
              "2022-08-30   -0.025001\n",
              "2022-08-31    0.012697\n",
              "2022-09-01    0.003852\n",
              "                ...   \n",
              "2023-10-31    0.004783\n",
              "2023-11-01    0.021953\n",
              "2023-11-02   -0.014182\n",
              "2023-11-03   -0.005911\n",
              "2023-11-06    0.008744\n",
              "Name: BTC-USD, Length: 301, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 56
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "predictions_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 450
        },
        "id": "2lNVS7QGC9fa",
        "outputId": "32de826e-67a2-44ac-e56d-ecc3ce0ca477"
      },
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            LSTM Predictions\n",
              "Date                        \n",
              "2022-08-26         -0.133299\n",
              "2022-08-29          0.012979\n",
              "2022-08-30         -0.041936\n",
              "2022-08-31         -0.002687\n",
              "2022-09-01          0.026295\n",
              "...                      ...\n",
              "2023-10-31         -0.001545\n",
              "2023-11-01         -0.003005\n",
              "2023-11-02         -0.020035\n",
              "2023-11-03          0.047988\n",
              "2023-11-06          0.014987\n",
              "\n",
              "[301 rows x 1 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-21b4f067-81b3-4b0d-a108-5919f583d5da\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>LSTM Predictions</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Date</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2022-08-26</th>\n",
              "      <td>-0.133299</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-08-29</th>\n",
              "      <td>0.012979</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-08-30</th>\n",
              "      <td>-0.041936</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-08-31</th>\n",
              "      <td>-0.002687</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-09-01</th>\n",
              "      <td>0.026295</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2023-10-31</th>\n",
              "      <td>-0.001545</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2023-11-01</th>\n",
              "      <td>-0.003005</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2023-11-02</th>\n",
              "      <td>-0.020035</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2023-11-03</th>\n",
              "      <td>0.047988</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2023-11-06</th>\n",
              "      <td>0.014987</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>301 rows × 1 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-21b4f067-81b3-4b0d-a108-5919f583d5da')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-21b4f067-81b3-4b0d-a108-5919f583d5da button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-21b4f067-81b3-4b0d-a108-5919f583d5da');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-05770fc7-f568-46bf-9e90-0e1deb1eaa9e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-05770fc7-f568-46bf-9e90-0e1deb1eaa9e')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-05770fc7-f568-46bf-9e90-0e1deb1eaa9e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 57
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "time_index = y_test.index\n",
        "# Create a line plot for LSTM predictions (orange color)\n",
        "plt.plot(time_index, LSTM_pred, color='orange', marker='o', label='LSTM Predictions')\n",
        "\n",
        "# Create a line plot for actual values (blue color)\n",
        "plt.plot(time_index, y_test, color='blue', marker='o', label='Actual Values')\n",
        "\n",
        "# Add labels and title\n",
        "plt.xlabel('Time Index')\n",
        "plt.ylabel('Values')\n",
        "plt.title('Line Plot of LSTM Predictions vs. Actual Values')\n",
        "\n",
        "# Display the legend\n",
        "plt.legend()\n",
        "\n",
        "# Show the plot\n",
        "plt.show()\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "kqnpdAfeBRoq",
        "outputId": "19c47c64-88cf-42ec-db6c-138d9fd099a6"
      },
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "num_features = X_train.shape[1]"
      ],
      "metadata": {
        "id": "84_cr8wxuahF"
      },
      "execution_count": 63,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "time_step = 12\n",
        "pred_months = 36  # 3 years\n",
        "\n",
        "# Initialize the input data\n",
        "x_input = y_test[-time_step:].to_numpy().reshape(1, -1)  # Use the last \"time_step\" months of data\n",
        "\n",
        "temp_input = list(x_input[0])\n",
        "lst_output = []\n",
        "\n",
        "n_steps = time_step\n",
        "i = 0\n",
        "\n",
        "x_input.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mCAVCRtmrJTM",
        "outputId": "51b1b955-b64f-447d-a9ff-4976ef6d9896"
      },
      "execution_count": 75,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1, 12)"
            ]
          },
          "metadata": {},
          "execution_count": 75
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x_input = x_input.reshape(1, time_step, num_features)"
      ],
      "metadata": {
        "id": "tzkZ79XhxeDQ"
      },
      "execution_count": 76,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "while i < pred_months:\n",
        "    if len(temp_input) > time_step:\n",
        "        x_input = np.array(temp_input[1:])\n",
        "        x_input = x_input.reshape(1, -1, 1)\n",
        "\n",
        "  # Modify num_features to match your data\n",
        "        yhat = LSTMModel.predict(x_input, verbose=0)\n",
        "        temp_input.extend(yhat[0].tolist())\n",
        "        temp_input = temp_input[1:]\n",
        "\n",
        "        lst_output.extend(yhat.tolist())\n",
        "        i = i + 1\n",
        "    else:\n",
        "        x_input = x_input.reshape(1, n_steps, 1)\n",
        "        yhat = LSTMModel.predict(x_input, verbose=0)\n",
        "        temp_input.extend(yhat[0].tolist())\n",
        "\n",
        "        lst_output.extend(yhat.tolist())\n",
        "        i = i + 1\n",
        "\n",
        "# Perform post-processing as before\n",
        "\n",
        "# Create a time index for the next 36 months\n",
        "time_index = pd.date_range(start=test_data.index[-1], periods=pred_months + 1, freq='M')\n",
        "\n",
        "# Inverse transform the predictions and create a DataFrame\n",
        "next_predicted_values = scaler.inverse_transform(np.array(lst_output).reshape(-1, 1)).flatten()\n",
        "new_pred_plot = pd.DataFrame({'Predicted Close': next_predicted_values}, index=time_index)\n",
        "\n",
        "# Plotting and customization as before\n",
        "names = cycle(['Predicted Close Price'])\n",
        "fig = px.line(new_pred_plot, x=new_pred_plot.index, y=new_pred_plot['Predicted Close'],\n",
        "              labels={'value': 'Bitcoin Price', 'index': 'Timestamp'})\n",
        "fig.update_layout(title_text='Bitcoin Price Prediction for the Next 36 Months',\n",
        "                  plot_bgcolor='white', legend_title_text='Close Price')\n",
        "fig.for_each_trace(lambda t: t.update(name=next(names)))\n",
        "fig.update_xaxes(showgrid=False)\n",
        "fig.update_yaxes(showgrid=False)\n",
        "fig.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "4tv_F8Z_uikk",
        "outputId": "f03d0c1e-a8aa-42e5-cabd-9a4dad0bc43f"
      },
      "execution_count": 77,
      "outputs": [
        {
          "output_type": "error",
          "ename": "InvalidArgumentError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mInvalidArgumentError\u001b[0m                      Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-77-c610274f4db5>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     13\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m         \u001b[0mx_input\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mx_input\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreshape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_steps\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 15\u001b[0;31m         \u001b[0myhat\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mLSTMModel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_input\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     16\u001b[0m         \u001b[0mtemp_input\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mextend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0myhat\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtolist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     68\u001b[0m             \u001b[0;31m# To get the full stack trace, call:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m             \u001b[0;31m# `tf.debugging.disable_traceback_filtering()`\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 70\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwith_traceback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfiltered_tb\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     71\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     72\u001b[0m             \u001b[0;32mdel\u001b[0m \u001b[0mfiltered_tb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/tensorflow/python/eager/execute.py\u001b[0m in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     58\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mt\u001b[0m \u001b[0;32min\u001b[0m \u001b[0minputs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     59\u001b[0m     ]\n\u001b[0;32m---> 60\u001b[0;31m     tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n\u001b[0m\u001b[1;32m     61\u001b[0m                                         inputs, attrs, num_outputs)\n\u001b[1;32m     62\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mInvalidArgumentError\u001b[0m: Graph execution error:\n\nDetected at node while/MatMul defined at (most recent call last):\n  File \"/usr/lib/python3.10/runpy.py\", line 196, in _run_module_as_main\n\n  File \"/usr/lib/python3.10/runpy.py\", line 86, in _run_code\n\n  File \"/usr/local/lib/python3.10/dist-packages/colab_kernel_launcher.py\", line 37, in <module>\n\n  File \"/usr/local/lib/python3.10/dist-packages/traitlets/config/application.py\", line 992, in launch_instance\n\n  File \"/usr/local/lib/python3.10/dist-packages/ipykernel/kernelapp.py\", line 619, in start\n\n  File \"/usr/local/lib/python3.10/dist-packages/tornado/platform/asyncio.py\", line 195, in start\n\n  File \"/usr/lib/python3.10/asyncio/base_events.py\", line 603, in run_forever\n\n  File \"/usr/lib/python3.10/asyncio/base_events.py\", line 1909, in _run_once\n\n  File \"/usr/lib/python3.10/asyncio/events.py\", line 80, in _run\n\n  File \"/usr/local/lib/python3.10/dist-packages/tornado/ioloop.py\", line 685, in <lambda>\n\n  File \"/usr/local/lib/python3.10/dist-packages/tornado/ioloop.py\", line 738, in _run_callback\n\n  File \"/usr/local/lib/python3.10/dist-packages/tornado/gen.py\", line 825, in inner\n\n  File \"/usr/local/lib/python3.10/dist-packages/tornado/gen.py\", line 786, in run\n\n  File \"/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\", line 361, in process_one\n\n  File \"/usr/local/lib/python3.10/dist-packages/tornado/gen.py\", line 234, in wrapper\n\n  File \"/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\", line 261, in dispatch_shell\n\n  File \"/usr/local/lib/python3.10/dist-packages/tornado/gen.py\", line 234, in wrapper\n\n  File \"/usr/local/lib/python3.10/dist-packages/ipykernel/kernelbase.py\", line 539, in execute_request\n\n  File \"/usr/local/lib/python3.10/dist-packages/tornado/gen.py\", line 234, in wrapper\n\n  File \"/usr/local/lib/python3.10/dist-packages/ipykernel/ipkernel.py\", line 302, in do_execute\n\n  File \"/usr/local/lib/python3.10/dist-packages/ipykernel/zmqshell.py\", line 539, in run_cell\n\n  File \"/usr/local/lib/python3.10/dist-packages/IPython/core/interactiveshell.py\", line 2975, in run_cell\n\n  File \"/usr/local/lib/python3.10/dist-packages/IPython/core/interactiveshell.py\", line 3030, in _run_cell\n\n  File \"/usr/local/lib/python3.10/dist-packages/IPython/core/async_helpers.py\", line 78, in _pseudo_sync_runner\n\n  File \"/usr/local/lib/python3.10/dist-packages/IPython/core/interactiveshell.py\", line 3257, in run_cell_async\n\n  File \"/usr/local/lib/python3.10/dist-packages/IPython/core/interactiveshell.py\", line 3473, in run_ast_nodes\n\n  File \"/usr/local/lib/python3.10/dist-packages/IPython/core/interactiveshell.py\", line 3553, in run_code\n\n  File \"<ipython-input-61-0563000b7568>\", line 18, in <cell line: 13>\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/utils/traceback_utils.py\", line 65, in error_handler\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\", line 2631, in predict\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\", line 2416, in predict_function\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\", line 2401, in step_function\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\", line 2389, in run_step\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\", line 2357, in predict_step\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/utils/traceback_utils.py\", line 65, in error_handler\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\", line 589, in __call__\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/utils/traceback_utils.py\", line 65, in error_handler\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/base_layer.py\", line 1149, in __call__\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/utils/traceback_utils.py\", line 96, in error_handler\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/sequential.py\", line 398, in call\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/functional.py\", line 515, in call\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/functional.py\", line 672, in _run_internal_graph\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/layers/rnn/base_rnn.py\", line 556, in __call__\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/utils/traceback_utils.py\", line 65, in error_handler\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/base_layer.py\", line 1149, in __call__\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/utils/traceback_utils.py\", line 96, in error_handler\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/layers/rnn/lstm.py\", line 749, in call\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/layers/rnn/lstm.py\", line 1339, in lstm_with_backend_selection\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/layers/rnn/lstm.py\", line 981, in standard_lstm\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/backend.py\", line 5170, in rnn\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/backend.py\", line 5149, in _step\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/layers/rnn/lstm.py\", line 967, in step\n\n  File \"/usr/local/lib/python3.10/dist-packages/keras/src/backend.py\", line 2465, in dot\n\nMatrix size-incompatible: In[0]: [1,1], In[1]: [7,48]\n\t [[{{node while/MatMul}}]]\n\t [[sequential_1/lstm_1/PartitionedCall]] [Op:__inference_predict_function_64076]"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(16,8))\n",
        "plt.title('LSTMModel')\n",
        "plt.xlabel('Date')\n",
        "plt.ylabel('Bit Coin')\n",
        "plt.plot(train)\n",
        "plt.plot(validation[['Close', 'Predictions']])\n",
        "plt.legend(['Train', 'Val', 'Predictions'], loc='lower right')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 317
        },
        "id": "N32HgEewzng2",
        "outputId": "67bde104-c158-4954-d97e-b6f934452c97"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-65-d922035d1555>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mtest_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX_test\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0my_test\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__array_ufunc__\u001b[0;34m(self, ufunc, method, *inputs, **kwargs)\u001b[0m\n\u001b[1;32m   2111\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mufunc\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mufunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mAny\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mAny\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2112\u001b[0m     ):\n\u001b[0;32m-> 2113\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0marraylike\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray_ufunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mufunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2114\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2115\u001b[0m     \u001b[0;31m# ----------------------------------------------------------------------\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/arraylike.py\u001b[0m in \u001b[0;36marray_ufunc\u001b[0;34m(self, ufunc, method, *inputs, **kwargs)\u001b[0m\n\u001b[1;32m    263\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    264\u001b[0m     \u001b[0;31m# for binary ops, use our custom dunder methods\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 265\u001b[0;31m     \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmaybe_dispatch_ufunc_to_dunder_op\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mufunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    266\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mresult\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mNotImplemented\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    267\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/_libs/ops_dispatch.pyx\u001b[0m in \u001b[0;36mpandas._libs.ops_dispatch.maybe_dispatch_ufunc_to_dunder_op\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/ops/common.py\u001b[0m in \u001b[0;36mnew_method\u001b[0;34m(self, other)\u001b[0m\n\u001b[1;32m     70\u001b[0m         \u001b[0mother\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mitem_from_zerodim\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mother\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     71\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 72\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mother\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     73\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     74\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mnew_method\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/arraylike.py\u001b[0m in \u001b[0;36m__radd__\u001b[0;34m(self, other)\u001b[0m\n\u001b[1;32m    104\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0munpack_zerodim_and_defer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"__radd__\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    105\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__radd__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mother\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 106\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_arith_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mother\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mroperator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mradd\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    107\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    108\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0munpack_zerodim_and_defer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"__sub__\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/series.py\u001b[0m in \u001b[0;36m_arith_method\u001b[0;34m(self, other, op)\u001b[0m\n\u001b[1;32m   6257\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_arith_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mother\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mop\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6258\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mother\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0malign_method_SERIES\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mother\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6259\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mbase\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mIndexOpsMixin\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_arith_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mother\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mop\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6260\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6261\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/base.py\u001b[0m in \u001b[0;36m_arith_method\u001b[0;34m(self, other, op)\u001b[0m\n\u001b[1;32m   1323\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1324\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0merrstate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mall\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"ignore\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1325\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marithmetic_op\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mop\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1326\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1327\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_construct_result\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mres_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/ops/array_ops.py\u001b[0m in \u001b[0;36marithmetic_op\u001b[0;34m(left, right, op)\u001b[0m\n\u001b[1;32m    224\u001b[0m         \u001b[0;31m# error: Argument 1 to \"_na_arithmetic_op\" has incompatible type\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    225\u001b[0m         \u001b[0;31m# \"Union[ExtensionArray, ndarray[Any, Any]]\"; expected \"ndarray[Any, Any]\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 226\u001b[0;31m         \u001b[0mres_values\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_na_arithmetic_op\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mleft\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mright\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mop\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[arg-type]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    227\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    228\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mres_values\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/ops/array_ops.py\u001b[0m in \u001b[0;36m_na_arithmetic_op\u001b[0;34m(left, right, op, is_cmp)\u001b[0m\n\u001b[1;32m    163\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    164\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 165\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mleft\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mright\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    166\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    167\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mis_cmp\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mis_object_dtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mleft\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mis_object_dtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mright\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/computation/expressions.py\u001b[0m in \u001b[0;36mevaluate\u001b[0;34m(op, a, b, use_numexpr)\u001b[0m\n\u001b[1;32m    239\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0muse_numexpr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    240\u001b[0m             \u001b[0;31m# error: \"None\" not callable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 241\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0m_evaluate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mop\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mop_str\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[misc]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    242\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0m_evaluate_standard\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mop\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mop_str\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    243\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/computation/expressions.py\u001b[0m in \u001b[0;36m_evaluate_numexpr\u001b[0;34m(op, op_str, a, b)\u001b[0m\n\u001b[1;32m    127\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    128\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mresult\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 129\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_evaluate_standard\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mop\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mop_str\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    130\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    131\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/computation/expressions.py\u001b[0m in \u001b[0;36m_evaluate_standard\u001b[0;34m(op, op_str, a, b)\u001b[0m\n\u001b[1;32m     68\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0m_TEST_MODE\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m         \u001b[0m_store_test_result\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 70\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     71\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     72\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/roperator.py\u001b[0m in \u001b[0;36mradd\u001b[0;34m(left, right)\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mradd\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mleft\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mright\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mright\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mleft\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: operands could not be broadcast together with shapes (301,1,7) (301,) "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "So-5jzMauhRj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "ARbcG6touhav"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "time_step = 12\n",
        "x_input=test_data[len(test_data)-time_step:].to_numpy()\n",
        "temp_input=list(x_input)\n",
        "temp_input=temp_input[0].tolist()\n",
        "from numpy import array\n",
        "lst_output=[]\n",
        "n_steps=time_step\n",
        "i=0\n",
        "pred_days = 60\n",
        "while(i<pred_days):\n",
        "\n",
        "    if(len(temp_input)>time_step):\n",
        "\n",
        "        x_input=np.array(temp_input[1:])\n",
        "        #print(\"{} day input {}\".format(i,x_input))\n",
        "        x_input = x_input.reshape(1,-1)\n",
        "        x_input = x_input.reshape((1, n_steps, 1))\n",
        "\n",
        "        yhat = LSTMModel.predict(x_input, verbose=0)\n",
        "        #print(\"{} day output {}\".format(i,yhat))\n",
        "        temp_input.extend(yhat[0].tolist())\n",
        "        temp_input=temp_input[1:]\n",
        "        #print(temp_input)\n",
        "\n",
        "        lst_output.extend(yhat.tolist())\n",
        "        i=i+1\n",
        "\n",
        "    else:\n",
        "\n",
        "        x_input = x_input.reshape((1, n_steps,1))\n",
        "        yhat = LSTMModel.predict(x_input, verbose=0)\n",
        "        temp_input.extend(yhat[0].tolist())\n",
        "\n",
        "        lst_output.extend(yhat.tolist())\n",
        "        i=i+1\n",
        "temp_mat = np.empty(pred_days+1)\n",
        "temp_mat[:] = np.nan\n",
        "temp_mat = temp_mat.reshape(1,-1).tolist()[0]\n",
        "next_predicted_days_value = temp_mat\n",
        "next_predicted_days_value = scaler.inverse_transform(np.array(lst_output).reshape(-1,1)).reshape(1,-1).tolist()[0]\n",
        "new_pred_plot = pd.DataFrame({\n",
        "    'Predicted Close':next_predicted_days_value\n",
        "})\n",
        "names = cycle(['Predicted next 60 days close price'])\n",
        "fig = px.line(new_pred_plot,x=new_pred_plot.index, y= new_pred_plot['Predicted Close'],\n",
        "              labels={'value': 'Stock price','index': 'Timestamp'})\n",
        "fig.update_layout(title_text='Next 60 days Closing price prediction',\n",
        "                  plot_bgcolor='white',legend_title_text='Close Price')\n",
        "fig.for_each_trace(lambda t:  t.update(name = next(names)))\n",
        "fig.update_xaxes(showgrid=False)\n",
        "fig.update_yaxes(showgrid=False)\n",
        "fig.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 242
        },
        "id": "zwoXxdM-IiLs",
        "outputId": "c5e4195f-5a87-4e05-cdf6-81f739487430"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-86-4a58a7d3d7c3>\u001b[0m in \u001b[0;36m<cell line: 11>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;32mwhile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m<\u001b[0m\u001b[0mpred_days\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m     \u001b[0;32mif\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtemp_input\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m>\u001b[0m\u001b[0mtime_step\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m         \u001b[0mx_input\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtemp_input\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mTypeError\u001b[0m: object of type 'float' has no len()"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "woRRtwosoUT8"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}